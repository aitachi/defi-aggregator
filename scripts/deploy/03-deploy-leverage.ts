// scripts/deploy/03-deploy-leverage.ts
import { ethers } from "hardhat";
import { writeFileSync, readFileSync, existsSync } from "fs";
import { join } from "path";

interface LeverageContracts {
    leverageHelper: string;
    liquidationBot: string;
    rebalanceBot: string;
    riskManager: string;
}

async function main() {
    console.log("üöÄ ÂºÄÂßãÈÉ®ÁΩ≤Êù†ÊùÜÂºïÊìé...\n");

    const [deployer] = await ethers.getSigners();
    console.log("ÈÉ®ÁΩ≤Ë¥¶Êà∑:", deployer.address);

    const deployedContracts: LeverageContracts = {} as LeverageContracts;

    // ËØªÂèñÊ†∏ÂøÉÁ≥ªÁªüÈÉ®ÁΩ≤‰ø°ÊÅØ
    const network = (await ethers.provider.getNetwork()).name;
    const coreDeploymentPath = join(__dirname, `../../deployments/core-${network}.json`);

    if (!existsSync(coreDeploymentPath)) {
        throw new Error("‚ùå ËØ∑ÂÖàÈÉ®ÁΩ≤Ê†∏ÂøÉÁ≥ªÁªü");
    }

    const coreDeployment = JSON.parse(readFileSync(coreDeploymentPath, "utf-8"));
    console.log("‚úÖ Â∑≤Âä†ËΩΩÊ†∏ÂøÉÁ≥ªÁªüÈÉ®ÁΩ≤‰ø°ÊÅØ\n");

    // ==========================================
    // 1. ÈÉ®ÁΩ≤Êù†ÊùÜÂä©Êâã
    // ==========================================
    console.log("üìå Ê≠•È™§ 1: ÈÉ®ÁΩ≤ LeverageHelper");

    const AAVE_POOL = process.env.AAVE_V3_POOL || "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2";
    const UNISWAP_ROUTER = process.env.UNISWAP_V3_ROUTER || "0xE592427A0AEce92De3Edee1F18E0157C05861564";

    const LeverageHelper = await ethers.getContractFactory("LeverageHelper");
    const leverageHelper = await LeverageHelper.deploy(
        AAVE_POOL,
        UNISWAP_ROUTER,
        coreDeployment.contracts.priceOracle
    );
    await leverageHelper.waitForDeployment();
    deployedContracts.leverageHelper = await leverageHelper.getAddress();
    console.log("  ‚úÖ LeverageHelper:", deployedContracts.leverageHelper, "\n");

    // ==========================================
    // 2. ÈÉ®ÁΩ≤Ê∏ÖÁÆóÊú∫Âô®‰∫∫
    // ==========================================
    console.log("üìå Ê≠•È™§ 2: ÈÉ®ÁΩ≤ LiquidationBot");

    const LiquidationBot = await ethers.getContractFactory("LiquidationBot");
    const liquidationBot = await LiquidationBot.deploy(
        deployedContracts.leverageHelper,
        AAVE_POOL
    );
    await liquidationBot.waitForDeployment();
    deployedContracts.liquidationBot = await liquidationBot.getAddress();
    console.log("  ‚úÖ LiquidationBot:", deployedContracts.liquidationBot, "\n");

    // ==========================================
    // 3. ÈÉ®ÁΩ≤ÂÜçÂπ≥Ë°°Êú∫Âô®‰∫∫
    // ==========================================
    console.log("üìå Ê≠•È™§ 3: ÈÉ®ÁΩ≤ RebalanceBot");

    const RebalanceBot = await ethers.getContractFactory("RebalanceBot");
    const rebalanceBot = await RebalanceBot.deploy(
        deployedContracts.leverageHelper
    );
    await rebalanceBot.waitForDeployment();
    deployedContracts.rebalanceBot = await rebalanceBot.getAddress();
    console.log("  ‚úÖ RebalanceBot:", deployedContracts.rebalanceBot, "\n");

    // ==========================================
    // 4. ÈÉ®ÁΩ≤È£éÈô©ÁÆ°ÁêÜÂô®
    // ==========================================
    console.log("üìå Ê≠•È™§ 4: ÈÉ®ÁΩ≤ RiskManager");

    const RiskManager = await ethers.getContractFactory("RiskManager");
    const riskManager = await RiskManager.deploy(
        coreDeployment.contracts.priceOracle
    );
    await riskManager.waitForDeployment();
    deployedContracts.riskManager = await riskManager.getAddress();
    console.log("  ‚úÖ RiskManager:", deployedContracts.riskManager, "\n");

    // ==========================================
    // 5. ÈÖçÁΩÆÊù†ÊùÜÂèÇÊï∞
    // ==========================================
    console.log("üìå Ê≠•È™§ 5: ÈÖçÁΩÆÊù†ÊùÜÂèÇÊï∞");

    const WETH = "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2";
    const USDC = "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48";

    // ÈÖçÁΩÆÊäµÊäºÂìÅ
    await leverageHelper.addCollateral(
        WETH,
        8000, // 80% LTV
        8500, // 85% Ê∏ÖÁÆóÈòàÂÄº
        105   // 5% Ê∏ÖÁÆóÂ•ñÂä±
    );
    console.log("  ‚úÖ Â∑≤ÈÖçÁΩÆ WETH ÊäµÊäºÂìÅ");

    // ÈÖçÁΩÆÂÄüË¥∑ËµÑ‰∫ß
    await leverageHelper.addBorrowAsset(USDC, 300); // 3ÂÄçÊúÄÂ§ßÊù†ÊùÜ
    console.log("  ‚úÖ Â∑≤ÈÖçÁΩÆ USDC ÂÄüË¥∑");

    // ÈÖçÁΩÆÊ∏ÖÁÆóÊú∫Âô®‰∫∫
    await liquidationBot.setMinProfitBasisPoints(50); // ÊúÄÂ∞è0.5%Âà©Ê∂¶
    await liquidationBot.setHealthFactorThreshold(ethers.parseEther("1.05")); // 1.05ÂÅ•Â∫∑Â∫¶ÈòàÂÄº
    console.log("  ‚úÖ Ê∏ÖÁÆóÊú∫Âô®‰∫∫ÈÖçÁΩÆÂÆåÊàê");

    // ÈÖçÁΩÆÂÜçÂπ≥Ë°°Êú∫Âô®‰∫∫
    await rebalanceBot.setRebalanceThreshold(200); // 2%ÂÅèÂ∑ÆËß¶ÂèëÂÜçÂπ≥Ë°°
    await rebalanceBot.setMaxGasPrice(ethers.parseUnits("100", "gwei"));
    console.log("  ‚úÖ ÂÜçÂπ≥Ë°°Êú∫Âô®‰∫∫ÈÖçÁΩÆÂÆåÊàê\n");

    // ==========================================
    // 6. Êéà‰∫àÊùÉÈôê
    // ==========================================
    console.log("üìå Ê≠•È™§ 6: Êéà‰∫àÊùÉÈôê");

    const KEEPER_ROLE = ethers.keccak256(ethers.toUtf8Bytes("KEEPER_ROLE"));

    const accessControl = await ethers.getContractAt(
        "AdvancedAccessControl",
        coreDeployment.contracts.accessControl
    );

    await accessControl.grantRole(KEEPER_ROLE, deployedContracts.liquidationBot);
    await accessControl.grantRole(KEEPER_ROLE, deployedContracts.rebalanceBot);
    console.log("  ‚úÖ Â∑≤Êéà‰∫à Keeper ÊùÉÈôê\n");

    // ==========================================
    // 7. ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
    // ==========================================
    console.log("üìå Ê≠•È™§ 7: ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ");

    const deploymentInfo = {
        network,
        chainId: (await ethers.provider.getNetwork()).chainId,
        deployer: deployer.address,
        timestamp: new Date().toISOString(),
        contracts: deployedContracts,
        configuration: {
            supportedCollateral: [
                { asset: WETH, ltv: 8000, liquidationThreshold: 8500 }
            ],
            supportedBorrowAssets: [
                { asset: USDC, maxLeverage: 300 }
            ],
            liquidationConfig: {
                minProfitBps: 50,
                healthFactorThreshold: "1.05"
            },
            rebalanceConfig: {
                threshold: 200,
                maxGasPrice: "100 gwei"
            }
        }
    };

    const filename = join(__dirname, `../../deployments/leverage-${network}.json`);
    writeFileSync(filename, JSON.stringify(deploymentInfo, null, 2));
    console.log("  ‚úÖ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠ò:", filename, "\n");

    // ==========================================
    // 8. ÈÉ®ÁΩ≤È™åËØÅ
    // ==========================================
    console.log("üìå Ê≠•È™§ 8: È™åËØÅÈÉ®ÁΩ≤");

    const collateralCount = await leverageHelper.getCollateralCount();
    console.log("  ÊîØÊåÅÁöÑÊäµÊäºÂìÅÊï∞Èáè:", collateralCount);

    const borrowAssetCount = await leverageHelper.getBorrowAssetCount();
    console.log("  ÊîØÊåÅÁöÑÂÄüË¥∑ËµÑ‰∫ßÊï∞Èáè:", borrowAssetCount);

    console.log("\n‚úÖ Êù†ÊùÜÂºïÊìéÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ\n");
    console.log("=" .repeat(60));
    console.log("üìù ÈáçË¶ÅÂú∞ÂùÄ:");
    console.log("=" .repeat(60));
    Object.entries(deployedContracts).forEach(([name, address]) => {
        console.log(`${name.padEnd(20)}: ${address}`);
    });
    console.log("=" .repeat(60));
    console.log("\nüí° ÊèêÁ§∫:");
    console.log("  1. ÂêØÂä®Ê∏ÖÁÆóÊú∫Âô®‰∫∫: npm run bot:liquidation");
    console.log("  2. ÂêØÂä®ÂÜçÂπ≥Ë°°Êú∫Âô®‰∫∫: npm run bot:rebalance");
    console.log("  3. ÊµãËØïÊù†ÊùÜÂºÄ‰ªì: npm run interact:leverage\n");
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
        process.exit(1);
    });